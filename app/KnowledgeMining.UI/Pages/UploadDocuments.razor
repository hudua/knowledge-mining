@page "/upload-documents"
@inject ISnackbar Snackbar
@inject IStorageService StorageService

<PageTitle>Upload Documents</PageTitle>

<MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="300px" Outlined="true" Class="@DragClass">
    @if (!Clearing)
    {
        <InputFile OnChange="OnInputFileChanged"  multiple class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
    }
    <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
    @foreach (var file in files)
    {
        <MudChip Color="Color.Dark" Text="@file.Name" />
    }
</MudPaper>
<MudToolBar DisableGutters="true" Class="d-flex flex-row flex-grow-1 justify-content-center gap-4">
    <MudButton OnClick="Upload" Disabled="@(!files.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
    <MudButton OnClick="Clear" Disabled="@(!files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
</MudToolBar>

@code {
    private bool Clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    IList<IBrowserFile> files = new List<IBrowserFile>();

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
    }

    private async Task Clear()
    {
        Clearing = true;
        files.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }

    private async Task Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        try
        {
            using var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(6));
            await StorageService.UploadDocuments(files.Select(f => new UploadDocument(f.Name, f.ContentType, f.OpenReadStream(maxAllowedSize: 10485760))), CancellationToken.None);
            Snackbar.Add("Files uploaded successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to upload files! Reason: {ex.Message}", Severity.Error);
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}