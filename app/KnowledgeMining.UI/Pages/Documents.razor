@page "/documents"
@using Microsoft.Extensions.Options

@inject ISnackbar Snackbar;
@inject IStorageService StorageService;
@inject ISearchService SearchService;
@inject IDialogService DialogService;

<PageTitle>Documents</PageTitle>

<MudButton StartIcon="@Icons.Filled.CloudUpload" Variant="Variant.Filled" OnClick="OpenUploadComponent">Upload Documents</MudButton>

<UploadDocumentsComponent @bind-Visible="_isUploadComponentVisible"></UploadDocumentsComponent>

<MudDataGrid T="Document" Items="@_documents" Hover="true" Loading="@_isLoading"
             ReadOnly="false"
             StartedEditingItem="@BackupDocument" CancelledEditingItem="@RestoreDocument" CommittedItemChanges="@SaveDocument"
             Bordered="true" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" RowsPerPage="@_pageSize" Virtualize="true">
    <ToolBarContent>
        <MudTextField T="string" ValueChanged="OnSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="Document" Field="Name" Title="Name" IsEditable="false"></Column>
        <Column T="Document" Field="Tags" Title="Tags"></Column>
        <Column T="Document" Title="Actions" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.DeleteForever" OnClick="@((e) => DeleteDocument(context.Item))" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
            </CellTemplate>
        </Column>
    </Columns>
    <NoRecordsContent>
        <MudText>No documents found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        @if (_pageHistory.Any())
        {
            <MudIconButton Icon="@Icons.Filled.NavigateBefore" OnClick="LoadPreviousPage"></MudIconButton>
        }
        @if (!string.IsNullOrWhiteSpace(_nextPage))
        {
            <MudIconButton Icon="@Icons.Filled.NavigateNext" OnClick="LoadNextPage"></MudIconButton>
        }
    </PagerContent>
</MudDataGrid>

@code {
    private bool _isLoading;
    private string? _searchText;
    private string? tagSearchText;

    private string? _currentPage;
    private string? _nextPage;
    private int _pageSize = 10;

    private Document _selectedDocument;
    private Document _backupSelectedDocument;

    private IEnumerable<Document> _documents = new List<Document>();
    private Stack<string?> _pageHistory = new Stack<string?>();

    // Upload Document
    private bool _isUploadComponentVisible;

    public void OpenUploadComponent()
    {
        _isUploadComponentVisible = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await Search(_searchText);
    }

    private void BackupDocument(Document item)
    {
        _backupSelectedDocument = new Document(item.Name, item.Tags);
    }

    private void RestoreDocument(Document item)
    {
        item = _backupSelectedDocument;
    }

    private void SaveDocument(Document item)
    {
        // TODO: Save changes
    }

    private async ValueTask DeleteDocument(Document document)
    {
        var parameters = new DialogParameters { ["document"] = document };

        var dialog = DialogService.Show<DeleteDocumentDialogComponent>("Delete Document", parameters);
        var result = await dialog.Result;

        if (result.Cancelled)
        {
            return;
        }

        try
        {
            await StorageService.DeleteDocument(document.Name, CancellationToken.None);
            await SearchService.QueueIndexerJob(CancellationToken.None);

            await Search(_searchText);

            StateHasChanged();

            Snackbar.Add("Document deleted", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Failed to deleted Document", Severity.Error);
        }
    }

    private async Task OnSearch(string searchText)
    {
        _searchText = searchText;

        await Search(searchText);
    }

    private async Task LoadPreviousPage()
    {
        var previousPage = GetLastPageFromHistory();

        await Search(_searchText, previousPage);
    }

    private async Task LoadNextPage()
    {
        AddPageToHistory(_currentPage);

        await Search(_searchText, _nextPage);
    }

    private async Task Search(string? searchText, string? nextPage = default)
    {
        SearchDocumentsResponse? response;

        _isLoading = true;

        response = await StorageService.SearchDocuments(searchText, _pageSize, nextPage, CancellationToken.None);

        _isLoading = false;

        if (string.IsNullOrWhiteSpace(nextPage)) { CleanPageHistory(); }

        UpdateTable(response.Documents);
        SetCurrentPage(nextPage);
        SetNextPage(response.NextPage);
    }

    private void UpdateTable(IEnumerable<Document> documents)
    {
        _documents = documents;
    }

    private void AddPageToHistory(string? page)
    {
        _pageHistory.Push(page);
    }

    private string? GetLastPageFromHistory()
    {
        return _pageHistory.Any() ? _pageHistory.Pop() : default;
    }

    private void CleanPageHistory()
    {
        if (_pageHistory.Any()) { _pageHistory.Clear(); }
        _nextPage = default;
    }

    private void SetCurrentPage(string? page)
    {
        _currentPage = page;
    }

    private void SetNextPage(string? page)
    {
        _nextPage = page;
    }
}
