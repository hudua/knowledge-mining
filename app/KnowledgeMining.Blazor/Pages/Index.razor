@page "/"

@inject NavigationManager NavigationManager
@inject ISearchService _searchService

<PageTitle>Home</PageTitle>

<MudPaper Height="400px" Width="100%" Class="mud-theme-info d-flex align-center" Square="true" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Style="@($"background: {Theme.Palette.White}")" Elevation="1">
            <MudAutocomplete T="string" Label="What are you searching for today?" @bind-Value="searchQuery" SearchFunc="@AutoComplete"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText"
                             CoerceValue="@coerceValue"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             AdornmentColor="Color.Primary"
                             OnAdornmentClick="@GoToSearchPage"
                             Variant="Variant.Outlined"
                             Margin="Margin.None" />
        </MudPaper>
    </MudContainer>
</MudPaper>
<MudPaper Height="400px"  Width="100%" Class="d-flex justify-content-end align-items-center" Square="true" Elevation="0">
    <MudStack Class="pr-16">
        <MudText Typo="Typo.h6" GutterBottom="true">LEARN MORE</MudText>
        <MudLink Href="#">Default</MudLink>
    </MudStack>
</MudPaper>


@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string? searchQuery;

    private MudTheme Theme = new MudTheme();

    private async Task<IEnumerable<string>> AutoComplete(string value)
    {
        var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(3));
        return await _searchService.Autocomplete(value, true, cancellationTokenSource.Token).ConfigureAwait(false);
    }

    private void GoToSearchPage()
    {
        NavigationManager.NavigateTo($"/search?q={searchQuery ?? string.Empty}");
    }
}

