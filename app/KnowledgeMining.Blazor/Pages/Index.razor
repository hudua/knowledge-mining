@page "/"
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<MudPaper Height="400px" Width="100%" Class="mud-theme-info d-flex align-center" Square="true" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Style="@($"background: {Theme.Palette.White}")" Elevation="1">
            <MudAutocomplete T="string" Label="What are you searching for today?" @bind-Value="value1" SearchFunc="@AutoComplete"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText"
                             CoerceValue="@coerceValue"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             AdornmentColor="Color.Primary"
                             OnAdornmentClick="@GoToSearchPage"
                             Variant="Variant.Outlined"
                             Margin="Margin.None" />
        </MudPaper>
    </MudContainer>
</MudPaper>
<MudPaper Height="400px"  Width="100%" Class="d-flex justify-content-end align-items-center" Square="true" Elevation="0">
    <MudStack Class="pr-16">
        <MudText Typo="Typo.h6" GutterBottom="true">LEARN MORE</MudText>
        <MudLink Href="#">Default</MudLink>
    </MudStack>
</MudPaper>


@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    private MudTheme Theme = new MudTheme();

    private string[] states =
    {
    //"Alabama", "Alaska", "American Samoa", "Arizona",
    //"Arkansas", "California", "Colorado", "Connecticut",
    //"Delaware", "District of Columbia", "Federated States of Micronesia",
    //"Florida", "Georgia", "Guam", "Hawaii", "Idaho",
    //"Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
    //"Louisiana", "Maine", "Marshall Islands", "Maryland",
    //"Massachusetts", "Michigan", "Minnesota", "Mississippi",
    //"Missouri", "Montana", "Nebraska", "Nevada",
    //"New Hampshire", "New Jersey", "New Mexico", "New York",
    //"North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
    //"Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
    //"Rhode Island", "South Carolina", "South Dakota", "Tennessee",
    //"Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
    //"Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> AutoComplete(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async void GoToSearchPage()
    {
        NavigationManager.NavigateTo("/search");
    }
}

