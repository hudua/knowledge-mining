@page "/search"
@using KnowledgeMining.Blazor.Models
@using KnowledgeMining.UI.Services.Search.Models

@inject ISearchService _searchService

<PageTitle>Search</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="0" md="1">

        </MudItem>
        <MudItem xs="12" md="2">
            <MudAutocomplete T="string" @bind-Value="SearchText" 
                             SearchFunc="@AutoComplete"
                             ResetValueOnEmptyText="true"
                             CoerceText="true"
                             CoerceValue="true"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             AdornmentColor="Color.Primary"
                             OnAdornmentClick="@(() => SearchDocuments())"
                             Variant="Variant.Outlined"
                             Margin="Margin.None" />
            <FacetsFilterComponent Facets="@_searchState.Facets"></FacetsFilterComponent>
        </MudItem>
        <MudItem xs="12" md="9">
            <MudTabs Elevation="0" Outlined="true" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="mt-1">
                <div class="d-flex flex-column">
                    <MudTabPanel Text="Search Results">
                        <SearchResultsComponent Documents="@_searchState.Documents"></SearchResultsComponent>
                        <div class="d-flex align-center flex-column pt-4">
                            @if(_searchState.TotalCount > 0){
                                <MudPagination Color="Color.Primary" Count="@_searchState.TotalPages" @bind-Selected="@_selectedPage" />
                            }
                        </div>
                    </MudTabPanel>
                    <MudTabPanel Text="Entity Map">
                        <div class="d-flex flex-row-reverse flex-fill">
                            <div>
                            </div>
                            <div class="d-flex flex-column">
                                <MudSlider Min="1" Max="3" Step="1" Value="@value" ValueLabel="true">Max Levels</MudSlider>
                                <MudSlider Min="3" Max="30" Step="1" Value="@value" ValueLabel="true">Max Levels</MudSlider>
                                <MudExpansionPanels Class="mt-6">
                                    <MudExpansionPanel Text="Select Facets">

                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            </div>
                        </div>
                    </MudTabPanel>
                </div>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "q")] public string? SearchText { get; set; }

    private SearchState _searchState = new();
    private int _selectedPage = 1;

    double value = 10.0;

    protected override async Task OnInitializedAsync()
    {
        await SearchDocuments(firstRender: true);
    }

    private async Task<IEnumerable<string>> AutoComplete(string value)
    {
        using var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(3));
        return await _searchService.Autocomplete(value, true, cancellationTokenSource.Token).ConfigureAwait(false);
    }

    private async Task SearchDocuments(bool firstRender = false)
    {
        using var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(6));
        var request = new SearchRequest(SearchText, _selectedPage, null, null);
        var response = await _searchService.SearchDocuments(request, cancellationTokenSource.Token).ConfigureAwait(false);

        //_searchState.Reset();

        //if (!firstRender)
        //{
        //    await InvokeAsync(() => StateHasChanged());
        //}

        _searchState.Documents = response.Documents;
        _searchState.FacetableFields = response.FacetableFields;
        _searchState.Facets = response.Facets;
        _searchState.Tags = response.Tags;
        _searchState.TotalCount = response.TotalCount;
        _searchState.TotalPages = (int)response.TotalPages;

        
    }
}
